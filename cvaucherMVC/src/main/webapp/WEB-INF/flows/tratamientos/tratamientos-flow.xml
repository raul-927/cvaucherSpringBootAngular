<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/webflow
        http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">
        
     <!-- Inicio Variables paciente, direccion, agenda, historiaClinica, tratamientoPaciente -->
	 <on-start>
	     
	    <set name="flowScope.caja"
			value="new uy.com.cvaucher.services.domain.Caja()"
			type="uy.com.cvaucher.services.domain.Caja" />
	    
	    <set name="flowScope.asientoContable"
			value="new uy.com.cvaucher.services.domain.AsientoContable()"
			type="uy.com.cvaucher.services.domain.AsientoContable" />
	     
		<set name="flowScope.pacientes"
			value="new uy.com.cvaucher.services.domain.Pacientes()"
			type="uy.com.cvaucher.services.domain.Pacientes" />

		<set name ="flowScope.tratamientoPaciente"
			value ="new uy.com.cvaucher.services.domain.TratamientoPaciente()"
			type ="uy.com.cvaucher.services.domain.TratamientoPaciente"/>
			
		<set name ="flowScope.tratamiento"
			value =" new uy.com.cvaucher.services.domain.Tratamiento()"
			type ="uy.com.cvaucher.services.domain.Tratamiento"/>
			
		<set name ="flowScope.formPagosOptions"
			value ="new uy.com.cvaucher.services.clases.FormPagosOptions()"
			type ="uy.com.cvaucher.services.clases.FormPagosOptions"/>
			
		<set name ="flowScope.pagoTarjeta"
			value ="new uy.com.cvaucher.services.domain.PagoTarjeta()"
			type ="uy.com.cvaucher.services.domain.PagoTarjeta"/>
			
		<set name ="flowScope.pagoEfectivo"
			value ="new uy.com.cvaucher.services.domain.PagoEfectivo()"
			type ="uy.com.cvaucher.services.domain.PagoEfectivo"/>
			
		<set name ="flowScope.pagoCredito"
			value ="new uy.com.cvaucher.services.domain.PagoCredito()"
			type ="uy.com.cvaucher.services.domain.PagoCredito"/>
			
		<set name ="flowScope.tipoFormPag"
			value ="new uy.com.cvaucher.services.clases.FormasDePagosDesc()"
			type ="uy.com.cvaucher.services.clases.FormasDePagosDesc"/>	
		
		<set name="flowScope.formasDePagos" 
		    value="new uy.com.cvaucher.services.domain.FormasDePagos()"
		    type ="uy.com.cvaucher.services.domain.FormasDePagos"/>		
		    
		<set name="flowScope.tratPacById"
			value="new uy.com.cvaucher.services.domain.TratByList()"
			type="uy.com.cvaucher.services.domain.TratByList"/>
	 </on-start>
	 	
	<!-- Cargo Pacientes, y Caja en Tratamientos -->
	<action-state id="verificoCaja">
	    <evaluate result ="flowScope.caja" expression ="flowPacientesController.cargoCajaActual()"/>
	    <transition to ="comprueboEstadoCaja"/>
	</action-state>
	
	<decision-state id="comprueboEstadoCaja">
	    <if test="flowScope.caja.cajaEstado == 'CERRADO' " then="cajaCerrada"/>
	    <if test="flowScope.caja.cajaEstado == 'ABIERTO' " then="cargoPacientesEnTratamientos"/>
	</decision-state>
	
	
	<action-state id="cargoPacientesEnTratamientos">
		 <evaluate expression="flowScope.tratamientoPaciente.pacientes = flowPacientesController.returnPacientes()"/>
		 <!--  <evaluate expression="flowScope.caja = "/> -->
		<transition to ="tratamientoPacienteInsert"/>
	</action-state>
	
	
	<!-- Tratamientos -->
	<view-state id="tratamientoPacienteInsert" view ="tratamientoPaciente/insertTratamientoPaciente" model ="tratamientoPaciente">
		<on-render>
			<evaluate result ="viewScope.fechaHoy" expression ="flowPacientesController.getFecha()"/>
			<evaluate result ="viewScope.tratP" expression="flowPacientesController.findAllTratamientoByActualList()"/>
		</on-render>
		
		<transition on ="cantSesionesTratamiento" to ="tratamientoPacienteInsert">
			<evaluate result ="flowScope.tratPacById" expression ="flowPacientesController.findTratamientoByActualListById(requestParameters.tratamId)"/>
			<render fragments="showCantSes"/>
		</transition>
		
		<transition on ="tratamientoPacienteIngresado" to ="seleccionoFormaDePago" bind="true">
			 <evaluate expression="flowPacientesController.setTratamientoPaciente(flowScope.tratamientoPaciente)"/>
			 <evaluate expression ="flowScope.importeTrat = flowPacientesController.getTratamientoPaciente().getCostoTratSesion()"/>
		</transition>
	</view-state>
	
	<view-state id ="seleccionoFormaDePago" view ="tratamientoPaciente/seleccionoFormaPago" model ="formPagosOptions">
		<on-render>
			<evaluate result ="viewScope.fpagoOption" expression="flowPacientesController.findAllFormasDePagos()"/>
			<evaluate expression ="flowScope.aux = requestParameters.formaDePagoDesc"/>
			<evaluate expression = "flowScope.aux2 = flowScope.tratamientoPaciente.costoTratSesion"/>
		</on-render>
		<transition on ="FormaPagoSelect" to ="formaPagTipo"/>
	</view-state>
	
	<action-state id="formaPagTipo">
		<evaluate expression="flowScope.tipoFormPag = flowPacientesController.findFormPagoTipoByDesc(requestParameters.formaDePagoDesc)"/>
		<transition to ="decisionFormaPago"/>
	</action-state>
	
	<decision-state id="decisionFormaPago">
		<if test="flowScope.tipoFormPag.formasDePagoTipo == 'TC'" then="pagoTarjetaCredito"/>
		<if test="flowScope.tipoFormPag.formasDePagoTipo == 'TD'" then="pagoTarjetaDebito"/>
		<if test="flowScope.tipoFormPag.formasDePagoTipo == 'EF'" then="pagoEfectivo"/>
		<if test="flowScope.tipoFormPag.formasDePagoTipo == 'CE'" then="pagoCreditoEfectivo"/>
		<if test="flowScope.tipoFormPag.formasDePagoTipo == 'DP'" then="pagoDepositoBancario"/>
	</decision-state>
	
	<!-- Tarjeta de Credito -->
	<view-state id="pagoTarjetaCredito" view ="tratamientoPaciente/pagoTarjetaCredito" model ="pagoTarjeta">
		<on-render>
			<evaluate result ="flowScope.tipoFormPag" expression = "flowPacientesController.getFormasDePagosDesc()"/>
			<evaluate result ="flowScope.paciente" expression="flowPacientesController.returnPacientes()"/>
		</on-render>
		
		<transition on ="finalizarIngresoTratamientoPago" to ="finIngresoTratamiento">
			<evaluate expression="flowPacientesController.insertTratamientoPagoTarjeta(flowScope.tratamientoPaciente, flowScope.pagoTarjeta, flowScope.tipoFormPag)"/>
		</transition>
	</view-state>
	
	<!-- Tarjeta de Debito -->
	<view-state id="pagoTarjetaDebito" view ="tratamientoPaciente/pagoTarjetaCredito" model ="pagoTarjeta">
		<on-render>
			<evaluate result ="flowScope.tipoFormPag" expression = "flowPacientesController.getFormasDePagosDesc()"/>
			<evaluate result ="flowScope.paciente" expression="flowPacientesController.returnPacientes()"/>
		</on-render>
		
		<transition on ="finalizarIngresoTratamientoPago" to ="finIngresoTratamiento">
			<evaluate expression="flowPacientesController.insertTratamientoPagoTarjeta(flowScope.tratamientoPaciente, flowScope.pagoTarjeta, flowScope.tipoFormPag)"/>
		</transition>
	</view-state>
	
	<!-- Pago Efectivo -->
	<view-state id ="pagoEfectivo" view ="tratamientoPaciente/pagoEfectivo" model ="pagoEfectivo">
		<on-render>
			<evaluate result ="flowScope.tipoFormPag" expression = "flowPacientesController.getFormasDePagosDesc()"/>
			<evaluate result ="flowScope.paciente" expression="flowPacientesController.returnPacientes()"/>
		</on-render>
		<transition on ="finalizarIngresoTratamientoPago" to ="finIngresoTratamiento">
			<evaluate expression="flowPacientesController.insertTratamientoPagoEfectivo(flowScope.tratamientoPaciente, flowScope.pagoEfectivo, flowScope.tipoFormPag)"/>
		</transition>
	</view-state>
	
	<!-- Pago Credito de la casa en Efectivo -->
	<view-state id ="pagoCreditoEfectivo" view ="tratamientoPaciente/pagoCreditoEfectivo" model ="pagoCredito">
		<on-render>
			<evaluate result ="flowScope.tipoFormPag" expression = "flowPacientesController.getFormasDePagosDesc()"/>
			<evaluate result ="flowScope.paciente" expression="flowPacientesController.returnPacientes()"/>
		</on-render>
		<transition on ="finalizarIngresoTratamientoPagoCredito" to ="finIngresoTratamiento">
			<evaluate expression="flowPacientesController.insertTratamientoPagoCredito(flowScope.tratamientoPaciente, flowScope.pagoCredito, flowScope.tipoFormPag)"/>
		</transition>
	</view-state>
	
	<!-- Pago Deposito Bancario -->
	<view-state id ="pagoDepositoBancario" view ="tratamientoPaciente/pagoDepositoBancario" model ="pagoDepositoBancario">
	</view-state>
	
	<action-state id="finIngresoTratamiento">
	    <evaluate expression="flowPacientesController.procesoAsientoContable()"/>
	    <transition to ="final"/>
	</action-state>
	
	<view-state id="cajaCerrada" view ="caja/cajaCerrada" model ="caja">
	    <transition on ="abrirCaja" to ="procesoAbrirCaja"/>
	</view-state>
	
	 <view-state id="procesoAbrirCaja" view ="caja/aperturaCaja" model ="caja">
	     
	 </view-state>
	<end-state id="final"/>
	
</flow>